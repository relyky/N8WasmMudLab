@using System.Reactive
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using N8WasmMudLab.Models
@implements IDisposable
@page "/demo001"

<h3>_DEMO001 - playground </h3>

<button @onclick=HandleClick>Click me</button>

<div class="d-flex gap-3">
  <div class="box">
    <h6>interval</h6>
    <div>
      @foreach (string msg in intervalObserver.MsgQueue.Reverse())
      {
        <span>@msg</span>
        <br />
      }
    </div>
  </div>
  <div class="box">
    <h6>click</h6>
    <div>
      @foreach (string msg in clickObserver.MsgQueue.Reverse())
      {
        <span>@msg</span>
        <br />
      }
    </div>
  </div>
  <div class="box">
    <h6>interval2</h6>
    <div>
      @foreach (string msg in interval2Observer.MsgQueue.Reverse())
      {
        <span>@msg</span>
        <br />
      }
    </div>
  </div>
  <div class="box">
    <h6>result</h6>
    <div>
      @foreach (string msg in resultObserver.MsgQueue.Reverse())
      {
        <span>@msg</span>
        <br />
      }
    </div>
  </div>
</div>

@code {
  MyObserver<long> intervalObserver = new("interval");
  MyObserver<string> interval2Observer = new("interval2");
  MyObserver<string> clickObserver = new("click");
  MyObserver<string> resultObserver = new("result");

  IObservable<long> interval = Observable.Interval(TimeSpan.FromSeconds(1d));
  Subject<string> clickSubject = new();
  IDisposable? subscriber = null;

  public void Dispose()
  {
    subscriber?.Dispose();
    subscriber = null;
  }

  protected override void OnInitialized()
  {
    // init
    intervalObserver.OnNextReceived = _ => InvokeAsync(StateHasChanged);
    interval2Observer.OnNextReceived = _ => InvokeAsync(StateHasChanged);
    clickObserver.OnNextReceived = _ => InvokeAsync(StateHasChanged);
    resultObserver.OnNextReceived = _ => InvokeAsync(StateHasChanged);

    // 訂閱
    interval.Subscribe(intervalObserver);
    clickSubject.Subscribe(clickObserver);

    var buffered = clickSubject.Buffer(TimeSpan.FromSeconds(1d)).Where(b => b.Count > 0);
    buffered.Select(bufferedItems => $"b[{bufferedItems.Count}]").Subscribe(interval2Observer);

    buffered.SelectMany(bufferedItems => bufferedItems.ToObservable().Zip(interval).Select(z => z.First))
            .Subscribe(resultObserver);
  }

  void HandleClick()
  {
    clickSubject.OnNext($"c{DateTime.Now:mmss.fff}");
  }
}
